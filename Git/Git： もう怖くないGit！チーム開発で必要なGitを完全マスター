[Git： もう怖くないGit！チーム開発で必要なGitを完全マスター
](https://cognizant.udemy.com/course/unscared_git/learn/lecture/6680054#overview)

# Gitはなんのために使うのか
- ファイルのバージョンを管理するため
- バージョン管理をするといつ誰がどんな変更をしたのかがわかる

# Gitの歴史
- リーナス・トーバルズ
  - Linuxの生みの親。Gitの原型を開発

# Gitはスナップショット？差分？
- スナップショットで保存している
- バージョンごとに別々になっている
- なぜスナップショット→スピード向上のため
- バージョン管理によって以前の状態に戻すことができる
- リポジトリ
  - 履歴データの置き場

# ローカルは3つのエリアに別れている
1. ワークツリー
   1. ファイル変更を行う場所
2. ステージ
   1. コミットする変更を準備する場所
   2. コミット→スナップショットを記録すること
   3. 変更した分だけ記録するため
3. リポジトリ
   1. スナップショットを記録する→コミット

# Gitのデータ構造
- リポジトリに圧縮ファイル、ツリー、コミットファイルを作成することでデータを保存している
- コミットが親コミットを持つことで変更履歴をたどることができる

# 変更をステージに追加する
`$ git add ファイル名`
`$ git add ディレクトリ名`
`$ git add .`

# コミット
`$ git commit`
`$ git commit -m "メッセージ"`
`$ git commit -v` // 変更内容を見ることができる

# わかりやすいコミットメッセージ
簡単に書くとき
- 変更内容の要点と理由を1行で完結に書く

正式に書くとき
1行目 -> 変更内容の要約
2行目 -> 空行
3行目 -> 変更した理由

# Git statusコマンド
ワークツリーとステージの間、ステージとリポジトリの間の変更されたファイルを確認することができる。

# 変更差分を確認する
git addする前の変更分
` $git diff`
` $git diff ファイル名`

git addしたあとの変更分
`$ git diff --staged`

# 変更履歴を確認する
`$ git log`

一行で表示する
`$ git log --oneline`

ファイルの変更差分を表示する
`$ git log -p index.html`

表示するコミット数を制限する
`$ git log -n コミット数`

# ファイルの削除を記録する
ファイルごと削除
`$ git rm ファイル名`
`$ git rm -r ディレクトリ名`

ファイルを残したいとき
`$ git rm --cached ファイル名`

# ファイルの移動を記録する
`$ git mv 旧ファイル 新ファイル`
