[Git： もう怖くないGit！チーム開発で必要なGitを完全マスター
](https://cognizant.udemy.com/course/unscared_git/learn/lecture/6680054#overview)

# Gitはなんのために使うのか
- ファイルのバージョンを管理するため
- バージョン管理をするといつ誰がどんな変更をしたのかがわかる

# Gitの歴史
- リーナス・トーバルズ
  - Linuxの生みの親。Gitの原型を開発

# Gitはスナップショット？差分？
- スナップショットで保存している
- バージョンごとに別々になっている
- なぜスナップショット→スピード向上のため
- バージョン管理によって以前の状態に戻すことができる
- リポジトリ
  - 履歴データの置き場

# ローカルは3つのエリアに別れている
1. ワークツリー
   1. ファイル変更を行う場所
2. ステージ
   1. コミットする変更を準備する場所
   2. コミット→スナップショットを記録すること
   3. 変更した分だけ記録するため
3. リポジトリ
   1. スナップショットを記録する→コミット

# Gitのデータ構造
- リポジトリに圧縮ファイル、ツリー、コミットファイルを作成することでデータを保存している
- コミットが親コミットを持つことで変更履歴をたどることができる

# 変更をステージに追加する
`$ git add ファイル名`
`$ git add ディレクトリ名`
`$ git add .`

# コミット
`$ git commit`
`$ git commit -m "メッセージ"`
`$ git commit -v` // 変更内容を見ることができる

# わかりやすいコミットメッセージ
簡単に書くとき
- 変更内容の要点と理由を1行で完結に書く

正式に書くとき
1行目 -> 変更内容の要約
2行目 -> 空行
3行目 -> 変更した理由

# Git statusコマンド
ワークツリーとステージの間、ステージとリポジトリの間の変更されたファイルを確認することができる。

# 変更差分を確認する
git addする前の変更分
` $git diff`
` $git diff ファイル名`

git addしたあとの変更分
`$ git diff --staged`

# 変更履歴を確認する
`$ git log`

一行で表示する
`$ git log --oneline`

ファイルの変更差分を表示する
`$ git log -p index.html`

表示するコミット数を制限する
`$ git log -n コミット数`

# ファイルの削除を記録する
ファイルごと削除
`$ git rm ファイル名`
`$ git rm -r ディレクトリ名`

ファイルを残したいとき
`$ git rm --cached ファイル名`

# ファイルの移動を記録する
`$ git mv 旧ファイル 新ファイル`

# 変更をもとに戻す
ワークツリーのファイルを元の状態に戻したいとき

`$ git chechout --ファイル名`
`$ git chechout --ディレクトリ名`

全変更を取り消す
`$ git chechout --.`

# ステージに追加した変更をもとに戻したいとき
`$ git reset HEAD ファイル名`
`$ git reset HEAD ディレクトリ名`

全変更を取り消す
`$ git reset HEAD`

# 直前のコミットを修正したいとき
`$ git commit --amend`

# リモートから情報を取得する（フェッチ）
`$ git fetch リモート名`
`$ git fetch origin`

# リモートから情報を取得してマージする（プル）
`$ git pull リモート名 ブランチ名`
`$ git pull origin master`

上記コマンドは省略可能
`$ git pull`

上記と下記は同じことを行っている
`$ git fetch origin master`
`$ git merge origin/master`

# フェッチとプルの使い分け
フェッチが基本的にはおすすめ

# リモートの詳細情報を表示する
`$ git remote show リモート名`
`$ git remote show origin`

# リモートを変更、削除する
変更する
`$ git remote rename 旧リモート名 新リモート名`
`$ git remote rename tutorial new_tutorial`

削除する
`$ git remote rm リモート名`
`$ git remote rm new_tutorial`

# ブランチとは何か
ブランチとは並行して複数機能を開発するための機能

# ブランチを新規追加する
`$ git branch ブランチ名`
`$ git branch feature`
ブランチを作成するだけで、切り替えは行われない

# ブランチ一覧の表示
`$ git branch`

すべてのブランチを表示する
`$ git branch -a`

# ブランチを切り替える
`$ git checkout 既存ブランチ名`
`$ git checkout feature`

ブランチを新規作成して切り替える
`$ git checkout -b 新ブランチ名`

# マージ
マージとは他の人の変更内容を取り込む作業のこと

`$ git merge ブランチ名`
`$ git merge リモート名/ブランチ`
`$ git merge origin/master`

# マージの種類
1. Fast Forward
2. Auto Merge
3. Conflict

# コンフリクト
同じファイルの同じ行に対して異なる編集を行うと発生する

# コンフリクトが起きにくいようにするためには
- 複数人で同じファイルを変更しない
- 変更中の状態をなくす（commitなど）
- プルするときは、プルするブランチに移動してからプルする
- コンフリクトしても慌てない

# ブランチ名を変更する、削除する
ブランチ名を変更する
`$ git branch -m ブランチ名`
`$ git branch -m new_branch`

ブランチを削除する
`$ git branch -d ブランチ`
`$ git branch -d feature`

強制削除する
`$ git branch -D ブランチ名`

# ブランチを利用した開発の流れ
masterブランチをリリース用ブランチに、開発はトピックブランチを作成してすすめるのが基本

# リモートブランチとは
リモートのブランチの状態へのポインタ

# プルリクエストの流れ
プルリクエストとは自分の変更したコードをリポジトリに取り込んでもらえるように依頼する

# GitHub Flow
GitHub社のワークフロー
